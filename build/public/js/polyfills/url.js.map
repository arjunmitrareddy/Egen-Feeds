{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/polyfills/url.js"],"names":[],"mappings":"AAAA;;;;;;ACGA,CAAC,UAAS,KAAK,EAAE;AACb,gBAAY,CAAC;;;AAGb,QAAI,aAAa,GAAG,KAAK,CAAC;AAC1B,QAAI,CAAC,KAAK,CAAC,SAAS,EAAE;AAClB,YAAI;AACA,gBAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AACjC,aAAC,CAAC,QAAQ,GAAG,OAAO,CAAC;AACrB,yBAAa,GAAG,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAAC;SAC/C,CAAC,OAAM,CAAC,EAAE,EAAE;KAChB;;AAED,QAAI,aAAa,EACb,OAAO;;AAEX,QAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnC,YAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AACrB,YAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACrB,YAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;AACxB,YAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;AACtB,YAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;AACxB,YAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AACpB,YAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;;AAEtB,QAAI,sBAAsB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACjD,0BAAsB,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;AACpC,0BAAsB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;AACtC,0BAAsB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;AACtC,0BAAsB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;;AAExC,aAAS,gBAAgB,CAAC,MAAM,EAAE;AAC9B,eAAO,QAAQ,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC;KACzC;;AAED,aAAS,OAAO,GAAG;AACf,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,YAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KAC1B;;AAED,aAAS,WAAW,CAAC,CAAC,EAAE;AACpB,YAAI,EAAE,IAAI,CAAC,EAAE;AACT,mBAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACrB;;AAED,eAAO,CAAC,CAAC,WAAW,EAAE,CAAA;KACzB;;AAED,aAAS,aAAa,CAAC,CAAC,EAAE;AACtB,YAAI,OAAO,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC9B,YAAI,OAAO,GAAG,IAAI,IACd,OAAO,GAAG,IAAI;;AAEd,SAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAC7D;AACE,mBAAO,CAAC,CAAC;SACZ;AACD,eAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;KAChC;;AAED,aAAS,kBAAkB,CAAC,CAAC,EAAE;;;;AAI3B,YAAI,OAAO,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC9B,YAAI,OAAO,GAAG,IAAI,IACd,OAAO,GAAG,IAAI;;AAEd,SAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EACvD;AACE,mBAAO,CAAC,CAAC;SACZ;AACD,eAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;KAChC;;AAED,QAAI,GAAG,GAAG,SAAS;QACf,KAAK,GAAG,UAAU;QAClB,YAAY,GAAG,mBAAmB,CAAC;;AAEvC,aAAS,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE;AACvC,iBAAS,GAAG,CAAC,OAAO,EAAE;AAClB,kBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;SACvB;;AAED,YAAI,KAAK,GAAG,aAAa,IAAI,cAAc;YACvC,MAAM,GAAG,CAAC;YACV,MAAM,GAAG,EAAE;YACX,MAAM,GAAG,KAAK;YACd,WAAW,GAAG,KAAK;YACnB,MAAM,GAAG,EAAE,CAAC;;AAEhB,YAAI,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,IAAI,CAAC,CAAA,IAAK,CAAC,IAAI,CAAC,UAAU,EAAE;AACxE,gBAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AACtB,oBAAQ,KAAK;AACT,qBAAK,cAAc;AACf,wBAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AACpB,8BAAM,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;AAC1B,6BAAK,GAAG,QAAQ,CAAC;qBACpB,MAAM,IAAI,CAAC,aAAa,EAAE;AACvB,8BAAM,GAAG,EAAE,CAAC;AACZ,6BAAK,GAAG,WAAW,CAAC;AACpB,iCAAS;qBACZ,MAAM;AACH,2BAAG,CAAC,iBAAiB,CAAC,CAAC;AACvB,8BAAM,IAAI,CAAC;qBACd;AACD,0BAAM;;AAAA,AAEV,qBAAK,QAAQ;AACT,wBAAI,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AAC3B,8BAAM,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;qBAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE;AACjB,gCAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACtB,kCAAM,GAAG,EAAE,CAAC;AACZ,gCAAI,aAAa,EAAE;AACf,sCAAM,IAAI,CAAC;6BACd;AACD,gCAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AAChC,oCAAI,CAAC,WAAW,GAAG,IAAI,CAAC;6BAC3B;AACD,gCAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;AACxB,qCAAK,GAAG,UAAU,CAAC;6BACtB,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;AACjE,qCAAK,GAAG,uBAAuB,CAAC;6BACnC,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,qCAAK,GAAG,uBAAuB,CAAC;6BACnC,MAAM;AACH,qCAAK,GAAG,aAAa,CAAC;6BACzB;yBACJ,MAAM,IAAI,CAAC,aAAa,EAAE;AACvB,kCAAM,GAAG,EAAE,CAAC;AACZ,kCAAM,GAAG,CAAC,CAAC;AACX,iCAAK,GAAG,WAAW,CAAC;AACpB,qCAAS;yBACZ,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE;AACjB,kCAAM,IAAI,CAAC;yBACd,MAAM;AACH,+BAAG,CAAC,oCAAoC,GAAG,CAAC,CAAC,CAAA;AAC7C,kCAAM,IAAI,CAAC;yBACd;AACD,0BAAM;;AAAA,AAEV,qBAAK,aAAa;AACd,wBAAI,GAAG,IAAI,CAAC,EAAE;AACV,6BAAK,GAAG,GAAG,CAAC;AACZ,6BAAK,GAAG,OAAO,CAAC;qBACnB,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE;AACjB,4BAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACrB,6BAAK,GAAG,UAAU,CAAC;qBACtB,MAAM;;AAEH,4BAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AACjD,gCAAI,CAAC,WAAW,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;yBACxC;qBACJ;AACD,0BAAM;;AAAA,AAEV,qBAAK,WAAW;AACZ,wBAAI,CAAC,IAAI,IAAI,CAAE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,AAAC,EAAE;AAC5C,2BAAG,CAAC,iBAAiB,CAAC,CAAC;AACvB,+BAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACtB,MAAM;AACH,6BAAK,GAAG,UAAU,CAAC;AACnB,iCAAS;qBACZ;AACD,0BAAM;;AAAA,AAEV,qBAAK,uBAAuB;AACxB,wBAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,MAAM,GAAC,CAAC,CAAC,EAAE;AACpC,6BAAK,GAAG,0BAA0B,CAAC;qBACtC,MAAM;AACH,2BAAG,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;AAC7B,6BAAK,GAAG,UAAU,CAAC;AACnB,iCAAQ;qBACX;AACD,0BAAM;;AAAA,AAEV,qBAAK,UAAU;AACX,wBAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,wBAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAChC,wBAAI,GAAG,IAAI,CAAC,EAAE;AACV,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAChC,4BAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC1B,4BAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,4BAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,8BAAM,IAAI,CAAC;qBACd,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AAC9B,4BAAI,IAAI,IAAI,CAAC,EACT,GAAG,CAAC,8BAA8B,CAAC,CAAC;AACxC,6BAAK,GAAG,gBAAgB,CAAC;qBAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE;AACjB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAChC,4BAAI,CAAC,MAAM,GAAG,GAAG,CAAC;AAClB,4BAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,4BAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,6BAAK,GAAG,OAAO,CAAC;qBACnB,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE;AACjB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,4BAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAChC,4BAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC1B,4BAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACrB,4BAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,4BAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,6BAAK,GAAG,UAAU,CAAC;qBACtB,MAAM;AACH,4BAAI,KAAK,GAAG,KAAK,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;AAC3B,4BAAI,SAAS,GAAG,KAAK,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;AAC/B,4BACI,MAAM,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IACvC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,AAAC,IAC7B,GAAG,IAAI,SAAS,IAAI,GAAG,IAAI,SAAS,IAAI,IAAI,IAAI,SAAS,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,IAAI,SAAS,AAAC,EAAE;AACrG,gCAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,gCAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,gCAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,gCAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,gCAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAChC,gCAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;yBACpB;AACD,6BAAK,GAAG,eAAe,CAAC;AACxB,iCAAS;qBACZ;AACD,0BAAM;;AAAA,AAEV,qBAAK,gBAAgB;AACjB,wBAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AACvB,4BAAI,IAAI,IAAI,CAAC,EAAE;AACX,+BAAG,CAAC,8BAA8B,CAAC,CAAC;yBACvC;AACD,4BAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;AACxB,iCAAK,GAAG,WAAW,CAAC;yBACvB,MAAM;AACH,iCAAK,GAAG,0BAA0B,CAAC;yBACtC;qBACJ,MAAM;AACH,4BAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;AACxB,gCAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,gCAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACxB,gCAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,gCAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;yBACnC;AACD,6BAAK,GAAG,eAAe,CAAC;AACxB,iCAAS;qBACZ;AACD,0BAAM;;AAAA,AAEV,qBAAK,uBAAuB;AACxB,wBAAI,GAAG,IAAI,CAAC,EAAE;AACV,6BAAK,GAAG,wBAAwB,CAAC;qBACpC,MAAM;AACH,2BAAG,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC;AAC/B,6BAAK,GAAG,0BAA0B,CAAC;AACnC,iCAAS;qBACZ;AACD,0BAAM;;AAAA,AAEV,qBAAK,wBAAwB;AACzB,yBAAK,GAAG,0BAA0B,CAAC;AACnC,wBAAI,GAAG,IAAI,CAAC,EAAE;AACV,2BAAG,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC;AAC/B,iCAAS;qBACZ;AACD,0BAAM;;AAAA,AAEV,qBAAK,0BAA0B;AAC3B,wBAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AACvB,6BAAK,GAAG,WAAW,CAAC;AACpB,iCAAS;qBACZ,MAAM;AACH,2BAAG,CAAC,2BAA2B,GAAG,CAAC,CAAC,CAAC;qBACxC;AACD,0BAAM;;AAAA,AAEV,qBAAK,WAAW;AACZ,wBAAI,GAAG,IAAI,CAAC,EAAE;AACV,4BAAI,MAAM,EAAE;AACR,+BAAG,CAAC,iBAAiB,CAAC,CAAC;AACvB,kCAAM,IAAI,KAAK,CAAC;yBACnB;AACD,8BAAM,GAAG,IAAI,CAAC;AACd,6BAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,gCAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACnB,gCAAI,IAAI,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,EAAE;AACxC,mCAAG,CAAC,kCAAkC,CAAC,CAAC;AACxC,yCAAS;6BACZ;;AAED,gCAAI,GAAG,IAAI,EAAE,IAAI,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE;AACtC,oCAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,yCAAS;6BACZ;AACD,gCAAI,KAAK,GAAG,aAAa,CAAC,EAAE,CAAC,CAAC;AAC9B,AAAC,gCAAI,KAAK,IAAI,CAAC,SAAS,GAAI,IAAI,CAAC,SAAS,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC;yBACjF;AACD,8BAAM,GAAG,EAAE,CAAC;qBACf,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE;AAClE,8BAAM,IAAI,MAAM,CAAC,MAAM,CAAC;AACxB,8BAAM,GAAG,EAAE,CAAC;AACZ,6BAAK,GAAG,MAAM,CAAC;AACf,iCAAS;qBACZ,MAAM;AACH,8BAAM,IAAI,CAAC,CAAC;qBACf;AACD,0BAAM;;AAAA,AAEV,qBAAK,WAAW;AACZ,wBAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE;AAC3D,4BAAI,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAA,AAAC,EAAE;AACvF,iCAAK,GAAG,eAAe,CAAC;yBAC3B,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;AAC3B,iCAAK,GAAG,qBAAqB,CAAC;yBACjC,MAAM;AACH,gCAAI,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5C,kCAAM,GAAG,EAAE,CAAC;AACZ,iCAAK,GAAG,qBAAqB,CAAC;yBACjC;AACD,iCAAS;qBACZ,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AAC5C,2BAAG,CAAC,kCAAkC,CAAC,CAAC;qBAC3C,MAAM;AACH,8BAAM,IAAI,CAAC,CAAC;qBACf;AACD,0BAAM;;AAAA,AAEV,qBAAK,MAAM,CAAC;AACZ,qBAAK,UAAU;AACX,wBAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;;AAE1B,4BAAI,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5C,8BAAM,GAAG,EAAE,CAAC;AACZ,6BAAK,GAAG,MAAM,CAAC;AACf,4BAAI,UAAU,IAAI,aAAa,EAAE;AAC7B,kCAAM,IAAI,CAAC;yBACd;qBACJ,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE;AAClE,4BAAI,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5C,8BAAM,GAAG,EAAE,CAAC;AACZ,6BAAK,GAAG,qBAAqB,CAAC;AAC9B,4BAAI,aAAa,EAAE;AACf,kCAAM,IAAI,CAAC;yBACd;AACD,iCAAS;qBACZ,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AAC5C,4BAAI,GAAG,IAAI,CAAC,EAAE;AACV,uCAAW,GAAG,IAAI,CAAC;yBACtB,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE;AACjB,uCAAW,GAAG,KAAK,CAAC;yBACvB;AACD,8BAAM,IAAI,CAAC,CAAC;qBACf,MAAM;AACH,2BAAG,CAAC,uCAAuC,GAAG,CAAC,CAAC,CAAC;qBACpD;AACD,0BAAM;;AAAA,AAEV,qBAAK,MAAM;AACP,wBAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AACjB,8BAAM,IAAI,CAAC,CAAC;qBACf,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,aAAa,EAAE;AACnF,4BAAI,EAAE,IAAI,MAAM,EAAE;AACd,gCAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAChC,gCAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AAChC,oCAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;6BAC1B;AACD,kCAAM,GAAG,EAAE,CAAC;yBACf;AACD,4BAAI,aAAa,EAAE;AACf,kCAAM,IAAI,CAAC;yBACd;AACD,6BAAK,GAAG,qBAAqB,CAAC;AAC9B,iCAAS;qBACZ,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AAC5C,2BAAG,CAAC,8BAA8B,GAAG,CAAC,CAAC,CAAC;qBAC3C,MAAM;AACH,+BAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACtB;AACD,0BAAM;;AAAA,AAEV,qBAAK,qBAAqB;AACtB,wBAAI,IAAI,IAAI,CAAC,EACT,GAAG,CAAC,2BAA2B,CAAC,CAAC;AACrC,yBAAK,GAAG,eAAe,CAAC;AACxB,wBAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AACvB,iCAAS;qBACZ;AACD,0BAAM;;AAAA,AAEV,qBAAK,eAAe;AAChB,wBAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAK,CAAC,aAAa,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA,AAAC,AAAC,EAAE;AACjF,4BAAI,IAAI,IAAI,CAAC,EAAE;AACX,+BAAG,CAAC,kCAAkC,CAAC,CAAC;yBAC3C;AACD,4BAAI,GAAG,CAAC;AACR,4BAAI,GAAG,GAAG,sBAAsB,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE;AACpD,kCAAM,GAAG,GAAG,CAAC;yBAChB;AACD,4BAAI,IAAI,IAAI,MAAM,EAAE;AAChB,gCAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AACjB,gCAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AACvB,oCAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;6BACvB;yBACJ,MAAM,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AAC/C,gCAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;yBACvB,MAAM,IAAI,GAAG,IAAI,MAAM,EAAE;AACtB,gCAAI,MAAM,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;AACrH,sCAAM,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;6BAC5B;AACD,gCAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBAC3B;AACD,8BAAM,GAAG,EAAE,CAAC;AACZ,4BAAI,GAAG,IAAI,CAAC,EAAE;AACV,gCAAI,CAAC,MAAM,GAAG,GAAG,CAAC;AAClB,iCAAK,GAAG,OAAO,CAAC;yBACnB,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE;AACjB,gCAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACrB,iCAAK,GAAG,UAAU,CAAC;yBACtB;qBACJ,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AAC5C,8BAAM,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;qBAC9B;AACD,0BAAM;;AAAA,AAEV,qBAAK,OAAO;AACR,wBAAI,CAAC,aAAa,IAAI,GAAG,IAAI,CAAC,EAAE;AAC5B,4BAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACrB,6BAAK,GAAG,UAAU,CAAC;qBACtB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AACxD,4BAAI,CAAC,MAAM,IAAI,kBAAkB,CAAC,CAAC,CAAC,CAAC;qBACxC;AACD,0BAAM;;AAAA,AAEV,qBAAK,UAAU;AACX,wBAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;AACjD,4BAAI,CAAC,SAAS,IAAI,CAAC,CAAC;qBACvB;AACD,0BAAM;AAAA,aACb;;AAED,kBAAM,EAAE,CAAC;SACZ;KACJ;;AAED,aAAS,KAAK,GAAG;AACb,YAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,YAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,YAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,YAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,YAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,YAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AACxB,YAAI,CAAC,WAAW,GAAG,KAAK,CAAC;KAC5B;;;;AAID,aAAS,IAAI,CAAC,GAAG,EAAE,IAAI,mBAAmB;AACtC,YAAI,IAAI,KAAK,SAAS,IAAI,EAAE,IAAI,YAAY,IAAI,CAAA,AAAC,EAC7C,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;AAElC,YAAI,CAAC,IAAI,GAAG,GAAG,CAAC;AAChB,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEjB,YAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC;;;AAG5D,aAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACvC;;AAED,QAAI,CAAC,SAAS,2BAAG;AACb,gBAAQ,EAAE,oBAAW;AACjB,mBAAO,IAAI,CAAC,IAAI,CAAC;SACpB;KAqHJ;AAtGO,YAAI;iBAdA,eAAG;AACP,oBAAI,IAAI,CAAC,UAAU,EACf,OAAO,IAAI,CAAC,IAAI,CAAC;;AAErB,oBAAI,SAAS,GAAG,EAAE,CAAC;AACnB,oBAAI,EAAE,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE;AAChD,6BAAS,GAAG,IAAI,CAAC,SAAS,IACrB,IAAI,IAAI,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,GAAG,EAAE,CAAA,AAAC,GAAG,GAAG,CAAC;iBAClE;;AAED,uBAAO,IAAI,CAAC,QAAQ,IACf,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA,AAAC,GACtD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;aACpD;iBACO,aAAC,IAAI,EAAE;AACX,qBAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC1B;;;;AAKG,gBAAQ;iBAHA,eAAG;AACX,uBAAO,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;aAC7B;iBACW,aAAC,QAAQ,EAAE;AACnB,oBAAI,IAAI,CAAC,UAAU,EACf,OAAO;AACX,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,GAAG,GAAG,EAAE,cAAc,CAAC,CAAC;aACpD;;;;AAMG,YAAI;iBAJA,eAAG;AACP,uBAAO,IAAI,CAAC,UAAU,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,GACxC,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aAC9C;iBACO,aAAC,IAAI,EAAE;AACX,oBAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,EACpC,OAAO;AACX,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;aAClC;;;;AAKG,gBAAQ;iBAHA,eAAG;AACX,uBAAO,IAAI,CAAC,KAAK,CAAC;aACrB;iBACW,aAAC,QAAQ,EAAE;AACnB,oBAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,EACpC,OAAO;AACX,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;aAC1C;;;;AAKG,YAAI;iBAHA,eAAG;AACP,uBAAO,IAAI,CAAC,KAAK,CAAC;aACrB;iBACO,aAAC,IAAI,EAAE;AACX,oBAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,EACpC,OAAO;AACX,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;aAClC;;;;AAMG,gBAAQ;iBAJA,eAAG;AACX,uBAAO,IAAI,CAAC,UAAU,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,GAC9C,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;aACjD;iBACW,aAAC,QAAQ,EAAE;AACnB,oBAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,EACpC,OAAO;AACX,oBAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,qBAAqB,CAAC,CAAC;aACrD;;;;AAMG,cAAM;iBAJA,eAAG;AACT,uBAAO,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,GACxD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;aACxB;iBACS,aAAC,MAAM,EAAE;AACf,oBAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,EACpC,OAAO;AACX,oBAAI,CAAC,MAAM,GAAG,GAAG,CAAC;AAClB,oBAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,EAChB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC7B,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aACrC;;;;AAMG,YAAI;iBAJA,eAAG;AACP,uBAAO,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,GAC9D,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;aAC3B;iBACO,aAAC,IAAI,EAAE;AACX,oBAAI,IAAI,CAAC,UAAU,EACf,OAAO;AACX,oBAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACrB,oBAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EACd,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,qBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;aACtC;;;;AAEG,cAAM;iBAAA,eAAG;AACT,oBAAI,IAAI,CAAC;AACT,oBAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AAClC,2BAAO,EAAE,CAAC;iBACb;;;;;;AAMD,wBAAQ,IAAI,CAAC,OAAO;AAChB,yBAAK,MAAM,CAAC;AACZ,yBAAK,MAAM,CAAC;AACZ,yBAAK,YAAY,CAAC;AAClB,yBAAK,QAAQ;AACT,+BAAO,MAAM,CAAC;AAAA,iBACrB;AACD,oBAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACjB,oBAAI,CAAC,IAAI,EAAE;AACP,2BAAO,EAAE,CAAC;iBACb;AACD,uBAAO,IAAI,CAAC,OAAO,GAAG,KAAK,GAAG,IAAI,CAAC;aACtC;;;;MACJ,CAAC;;;AAGF,QAAI,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC;AAC5B,QAAI,WAAW,EAAE;AACb,YAAI,CAAC,eAAe,GAAG,UAAS,IAAI,EAAE;;;AAGlC,mBAAO,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;SACpE,CAAC;AACF,YAAI,CAAC,eAAe,GAAG,UAAS,GAAG,EAAE;AACjC,uBAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;SACpC,CAAC;KACL;;AAED,SAAK,CAAC,GAAG,GAAG,IAAI,CAAC;CAEpB,CAAA,CAAE,IAAI,CAAC,CAAC","file":"url.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n\n(function(scope) {\n    'use strict';\n\n    // feature detect for URL constructor\n    var hasWorkingUrl = false;\n    if (!scope.forceJURL) {\n        try {\n            var u = new URL('b', 'http://a');\n            u.pathname = 'c%20d';\n            hasWorkingUrl = u.href === 'http://a/c%20d';\n        } catch(e) {}\n    }\n\n    if (hasWorkingUrl)\n        return;\n\n    var relative = Object.create(null);\n    relative['ftp'] = 21;\n    relative['file'] = 0;\n    relative['gopher'] = 70;\n    relative['http'] = 80;\n    relative['https'] = 443;\n    relative['ws'] = 80;\n    relative['wss'] = 443;\n\n    var relativePathDotMapping = Object.create(null);\n    relativePathDotMapping['%2e'] = '.';\n    relativePathDotMapping['.%2e'] = '..';\n    relativePathDotMapping['%2e.'] = '..';\n    relativePathDotMapping['%2e%2e'] = '..';\n\n    function isRelativeScheme(scheme) {\n        return relative[scheme] !== undefined;\n    }\n\n    function invalid() {\n        clear.call(this);\n        this._isInvalid = true;\n    }\n\n    function IDNAToASCII(h) {\n        if ('' == h) {\n            invalid.call(this)\n        }\n        // XXX\n        return h.toLowerCase()\n    }\n\n    function percentEscape(c) {\n        var unicode = c.charCodeAt(0);\n        if (unicode > 0x20 &&\n            unicode < 0x7F &&\n            // \" # < > ? `\n            [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) == -1\n        ) {\n            return c;\n        }\n        return encodeURIComponent(c);\n    }\n\n    function percentEscapeQuery(c) {\n        // XXX This actually needs to encode c using encoding and then\n        // convert the bytes one-by-one.\n\n        var unicode = c.charCodeAt(0);\n        if (unicode > 0x20 &&\n            unicode < 0x7F &&\n            // \" # < > ` (do not escape '?')\n            [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) == -1\n        ) {\n            return c;\n        }\n        return encodeURIComponent(c);\n    }\n\n    var EOF = undefined,\n        ALPHA = /[a-zA-Z]/,\n        ALPHANUMERIC = /[a-zA-Z0-9\\+\\-\\.]/;\n\n    function parse(input, stateOverride, base) {\n        function err(message) {\n            errors.push(message)\n        }\n\n        var state = stateOverride || 'scheme start',\n            cursor = 0,\n            buffer = '',\n            seenAt = false,\n            seenBracket = false,\n            errors = [];\n\n        loop: while ((input[cursor - 1] != EOF || cursor == 0) && !this._isInvalid) {\n            var c = input[cursor];\n            switch (state) {\n                case 'scheme start':\n                    if (c && ALPHA.test(c)) {\n                        buffer += c.toLowerCase(); // ASCII-safe\n                        state = 'scheme';\n                    } else if (!stateOverride) {\n                        buffer = '';\n                        state = 'no scheme';\n                        continue;\n                    } else {\n                        err('Invalid scheme.');\n                        break loop;\n                    }\n                    break;\n\n                case 'scheme':\n                    if (c && ALPHANUMERIC.test(c)) {\n                        buffer += c.toLowerCase(); // ASCII-safe\n                    } else if (':' == c) {\n                        this._scheme = buffer;\n                        buffer = '';\n                        if (stateOverride) {\n                            break loop;\n                        }\n                        if (isRelativeScheme(this._scheme)) {\n                            this._isRelative = true;\n                        }\n                        if ('file' == this._scheme) {\n                            state = 'relative';\n                        } else if (this._isRelative && base && base._scheme == this._scheme) {\n                            state = 'relative or authority';\n                        } else if (this._isRelative) {\n                            state = 'authority first slash';\n                        } else {\n                            state = 'scheme data';\n                        }\n                    } else if (!stateOverride) {\n                        buffer = '';\n                        cursor = 0;\n                        state = 'no scheme';\n                        continue;\n                    } else if (EOF == c) {\n                        break loop;\n                    } else {\n                        err('Code point not allowed in scheme: ' + c)\n                        break loop;\n                    }\n                    break;\n\n                case 'scheme data':\n                    if ('?' == c) {\n                        query = '?';\n                        state = 'query';\n                    } else if ('#' == c) {\n                        this._fragment = '#';\n                        state = 'fragment';\n                    } else {\n                        // XXX error handling\n                        if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n                            this._schemeData += percentEscape(c);\n                        }\n                    }\n                    break;\n\n                case 'no scheme':\n                    if (!base || !(isRelativeScheme(base._scheme))) {\n                        err('Missing scheme.');\n                        invalid.call(this);\n                    } else {\n                        state = 'relative';\n                        continue;\n                    }\n                    break;\n\n                case 'relative or authority':\n                    if ('/' == c && '/' == input[cursor+1]) {\n                        state = 'authority ignore slashes';\n                    } else {\n                        err('Expected /, got: ' + c);\n                        state = 'relative';\n                        continue\n                    }\n                    break;\n\n                case 'relative':\n                    this._isRelative = true;\n                    if ('file' != this._scheme)\n                        this._scheme = base._scheme;\n                    if (EOF == c) {\n                        this._host = base._host;\n                        this._port = base._port;\n                        this._path = base._path.slice();\n                        this._query = base._query;\n                        this._username = base._username;\n                        this._password = base._password;\n                        break loop;\n                    } else if ('/' == c || '\\\\' == c) {\n                        if ('\\\\' == c)\n                            err('\\\\ is an invalid code point.');\n                        state = 'relative slash';\n                    } else if ('?' == c) {\n                        this._host = base._host;\n                        this._port = base._port;\n                        this._path = base._path.slice();\n                        this._query = '?';\n                        this._username = base._username;\n                        this._password = base._password;\n                        state = 'query';\n                    } else if ('#' == c) {\n                        this._host = base._host;\n                        this._port = base._port;\n                        this._path = base._path.slice();\n                        this._query = base._query;\n                        this._fragment = '#';\n                        this._username = base._username;\n                        this._password = base._password;\n                        state = 'fragment';\n                    } else {\n                        var nextC = input[cursor+1]\n                        var nextNextC = input[cursor+2]\n                        if (\n                            'file' != this._scheme || !ALPHA.test(c) ||\n                            (nextC != ':' && nextC != '|') ||\n                            (EOF != nextNextC && '/' != nextNextC && '\\\\' != nextNextC && '?' != nextNextC && '#' != nextNextC)) {\n                            this._host = base._host;\n                            this._port = base._port;\n                            this._username = base._username;\n                            this._password = base._password;\n                            this._path = base._path.slice();\n                            this._path.pop();\n                        }\n                        state = 'relative path';\n                        continue;\n                    }\n                    break;\n\n                case 'relative slash':\n                    if ('/' == c || '\\\\' == c) {\n                        if ('\\\\' == c) {\n                            err('\\\\ is an invalid code point.');\n                        }\n                        if ('file' == this._scheme) {\n                            state = 'file host';\n                        } else {\n                            state = 'authority ignore slashes';\n                        }\n                    } else {\n                        if ('file' != this._scheme) {\n                            this._host = base._host;\n                            this._port = base._port;\n                            this._username = base._username;\n                            this._password = base._password;\n                        }\n                        state = 'relative path';\n                        continue;\n                    }\n                    break;\n\n                case 'authority first slash':\n                    if ('/' == c) {\n                        state = 'authority second slash';\n                    } else {\n                        err(\"Expected '/', got: \" + c);\n                        state = 'authority ignore slashes';\n                        continue;\n                    }\n                    break;\n\n                case 'authority second slash':\n                    state = 'authority ignore slashes';\n                    if ('/' != c) {\n                        err(\"Expected '/', got: \" + c);\n                        continue;\n                    }\n                    break;\n\n                case 'authority ignore slashes':\n                    if ('/' != c && '\\\\' != c) {\n                        state = 'authority';\n                        continue;\n                    } else {\n                        err('Expected authority, got: ' + c);\n                    }\n                    break;\n\n                case 'authority':\n                    if ('@' == c) {\n                        if (seenAt) {\n                            err('@ already seen.');\n                            buffer += '%40';\n                        }\n                        seenAt = true;\n                        for (var i = 0; i < buffer.length; i++) {\n                            var cp = buffer[i];\n                            if ('\\t' == cp || '\\n' == cp || '\\r' == cp) {\n                                err('Invalid whitespace in authority.');\n                                continue;\n                            }\n                            // XXX check URL code points\n                            if (':' == cp && null === this._password) {\n                                this._password = '';\n                                continue;\n                            }\n                            var tempC = percentEscape(cp);\n                            (null !== this._password) ? this._password += tempC : this._username += tempC;\n                        }\n                        buffer = '';\n                    } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n                        cursor -= buffer.length;\n                        buffer = '';\n                        state = 'host';\n                        continue;\n                    } else {\n                        buffer += c;\n                    }\n                    break;\n\n                case 'file host':\n                    if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n                        if (buffer.length == 2 && ALPHA.test(buffer[0]) && (buffer[1] == ':' || buffer[1] == '|')) {\n                            state = 'relative path';\n                        } else if (buffer.length == 0) {\n                            state = 'relative path start';\n                        } else {\n                            this._host = IDNAToASCII.call(this, buffer);\n                            buffer = '';\n                            state = 'relative path start';\n                        }\n                        continue;\n                    } else if ('\\t' == c || '\\n' == c || '\\r' == c) {\n                        err('Invalid whitespace in file host.');\n                    } else {\n                        buffer += c;\n                    }\n                    break;\n\n                case 'host':\n                case 'hostname':\n                    if (':' == c && !seenBracket) {\n                        // XXX host parsing\n                        this._host = IDNAToASCII.call(this, buffer);\n                        buffer = '';\n                        state = 'port';\n                        if ('hostname' == stateOverride) {\n                            break loop;\n                        }\n                    } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n                        this._host = IDNAToASCII.call(this, buffer);\n                        buffer = '';\n                        state = 'relative path start';\n                        if (stateOverride) {\n                            break loop;\n                        }\n                        continue;\n                    } else if ('\\t' != c && '\\n' != c && '\\r' != c) {\n                        if ('[' == c) {\n                            seenBracket = true;\n                        } else if (']' == c) {\n                            seenBracket = false;\n                        }\n                        buffer += c;\n                    } else {\n                        err('Invalid code point in host/hostname: ' + c);\n                    }\n                    break;\n\n                case 'port':\n                    if (/[0-9]/.test(c)) {\n                        buffer += c;\n                    } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c || stateOverride) {\n                        if ('' != buffer) {\n                            var temp = parseInt(buffer, 10);\n                            if (temp != relative[this._scheme]) {\n                                this._port = temp + '';\n                            }\n                            buffer = '';\n                        }\n                        if (stateOverride) {\n                            break loop;\n                        }\n                        state = 'relative path start';\n                        continue;\n                    } else if ('\\t' == c || '\\n' == c || '\\r' == c) {\n                        err('Invalid code point in port: ' + c);\n                    } else {\n                        invalid.call(this);\n                    }\n                    break;\n\n                case 'relative path start':\n                    if ('\\\\' == c)\n                        err(\"'\\\\' not allowed in path.\");\n                    state = 'relative path';\n                    if ('/' != c && '\\\\' != c) {\n                        continue;\n                    }\n                    break;\n\n                case 'relative path':\n                    if (EOF == c || '/' == c || '\\\\' == c || (!stateOverride && ('?' == c || '#' == c))) {\n                        if ('\\\\' == c) {\n                            err('\\\\ not allowed in relative path.');\n                        }\n                        var tmp;\n                        if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {\n                            buffer = tmp;\n                        }\n                        if ('..' == buffer) {\n                            this._path.pop();\n                            if ('/' != c && '\\\\' != c) {\n                                this._path.push('');\n                            }\n                        } else if ('.' == buffer && '/' != c && '\\\\' != c) {\n                            this._path.push('');\n                        } else if ('.' != buffer) {\n                            if ('file' == this._scheme && this._path.length == 0 && buffer.length == 2 && ALPHA.test(buffer[0]) && buffer[1] == '|') {\n                                buffer = buffer[0] + ':';\n                            }\n                            this._path.push(buffer);\n                        }\n                        buffer = '';\n                        if ('?' == c) {\n                            this._query = '?';\n                            state = 'query';\n                        } else if ('#' == c) {\n                            this._fragment = '#';\n                            state = 'fragment';\n                        }\n                    } else if ('\\t' != c && '\\n' != c && '\\r' != c) {\n                        buffer += percentEscape(c);\n                    }\n                    break;\n\n                case 'query':\n                    if (!stateOverride && '#' == c) {\n                        this._fragment = '#';\n                        state = 'fragment';\n                    } else if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n                        this._query += percentEscapeQuery(c);\n                    }\n                    break;\n\n                case 'fragment':\n                    if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n                        this._fragment += c;\n                    }\n                    break;\n            }\n\n            cursor++;\n        }\n    }\n\n    function clear() {\n        this._scheme = '';\n        this._schemeData = '';\n        this._username = '';\n        this._password = null;\n        this._host = '';\n        this._port = '';\n        this._path = [];\n        this._query = '';\n        this._fragment = '';\n        this._isInvalid = false;\n        this._isRelative = false;\n    }\n\n    // Does not process domain names or IP addresses.\n    // Does not handle encoding for the query parameter.\n    function jURL(url, base /* , encoding */) {\n        if (base !== undefined && !(base instanceof jURL))\n            base = new jURL(String(base));\n\n        this._url = url;\n        clear.call(this);\n\n        var input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n        // encoding = encoding || 'utf-8'\n\n        parse.call(this, input, null, base);\n    }\n\n    jURL.prototype = {\n        toString: function() {\n            return this.href;\n        },\n        get href() {\n            if (this._isInvalid)\n                return this._url;\n\n            var authority = '';\n            if ('' != this._username || null != this._password) {\n                authority = this._username +\n                    (null != this._password ? ':' + this._password : '') + '@';\n            }\n\n            return this.protocol +\n                (this._isRelative ? '//' + authority + this.host : '') +\n                this.pathname + this._query + this._fragment;\n        },\n        set href(href) {\n            clear.call(this);\n            parse.call(this, href);\n        },\n\n        get protocol() {\n            return this._scheme + ':';\n        },\n        set protocol(protocol) {\n            if (this._isInvalid)\n                return;\n            parse.call(this, protocol + ':', 'scheme start');\n        },\n\n        get host() {\n            return this._isInvalid ? '' : this._port ?\n            this._host + ':' + this._port : this._host;\n        },\n        set host(host) {\n            if (this._isInvalid || !this._isRelative)\n                return;\n            parse.call(this, host, 'host');\n        },\n\n        get hostname() {\n            return this._host;\n        },\n        set hostname(hostname) {\n            if (this._isInvalid || !this._isRelative)\n                return;\n            parse.call(this, hostname, 'hostname');\n        },\n\n        get port() {\n            return this._port;\n        },\n        set port(port) {\n            if (this._isInvalid || !this._isRelative)\n                return;\n            parse.call(this, port, 'port');\n        },\n\n        get pathname() {\n            return this._isInvalid ? '' : this._isRelative ?\n            '/' + this._path.join('/') : this._schemeData;\n        },\n        set pathname(pathname) {\n            if (this._isInvalid || !this._isRelative)\n                return;\n            this._path = [];\n            parse.call(this, pathname, 'relative path start');\n        },\n\n        get search() {\n            return this._isInvalid || !this._query || '?' == this._query ?\n                '' : this._query;\n        },\n        set search(search) {\n            if (this._isInvalid || !this._isRelative)\n                return;\n            this._query = '?';\n            if ('?' == search[0])\n                search = search.slice(1);\n            parse.call(this, search, 'query');\n        },\n\n        get hash() {\n            return this._isInvalid || !this._fragment || '#' == this._fragment ?\n                '' : this._fragment;\n        },\n        set hash(hash) {\n            if (this._isInvalid)\n                return;\n            this._fragment = '#';\n            if ('#' == hash[0])\n                hash = hash.slice(1);\n            parse.call(this, hash, 'fragment');\n        },\n\n        get origin() {\n            var host;\n            if (this._isInvalid || !this._scheme) {\n                return '';\n            }\n            // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n            // Gecko throws error for \"data://\"\n            // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n            // Gecko returns String(\"\") for file: mailto:\n            // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n            switch (this._scheme) {\n                case 'data':\n                case 'file':\n                case 'javascript':\n                case 'mailto':\n                    return 'null';\n            }\n            host = this.host;\n            if (!host) {\n                return '';\n            }\n            return this._scheme + '://' + host;\n        }\n    };\n\n    // Copy over the static methods\n    var OriginalURL = scope.URL;\n    if (OriginalURL) {\n        jURL.createObjectURL = function(blob) {\n            // IE extension allows a second optional options argument.\n            // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n            return OriginalURL.createObjectURL.apply(OriginalURL, arguments);\n        };\n        jURL.revokeObjectURL = function(url) {\n            OriginalURL.revokeObjectURL(url);\n        };\n    }\n\n    scope.URL = jURL;\n\n})(self);"],"preExisting":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}